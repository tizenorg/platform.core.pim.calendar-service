/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __CAL_DBUS_H__
#define __CAL_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.tizen.calendar_service.dbus */

#define CAL_TYPE_DBUS (cal_dbus_get_type ())
#define CAL_DBUS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CAL_TYPE_DBUS, calDbus))
#define CAL_IS_DBUS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CAL_TYPE_DBUS))
#define CAL_DBUS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), CAL_TYPE_DBUS, calDbusIface))

struct _calDbus;
typedef struct _calDbus calDbus;
typedef struct _calDbusIface calDbusIface;

struct _calDbusIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_add_changed_cb) (
    calDbus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_clean_after_sync) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    gint arg_book_id,
    gint arg_db_version);

  gboolean (*handle_delete_record) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_id);

  gboolean (*handle_delete_records) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    GVariant *arg_ids,
    gint arg_count);

  gboolean (*handle_get_all_records) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_offset,
    gint arg_limit);

  gboolean (*handle_get_changes_by_version) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_book_id,
    gint arg_db_version);

  gboolean (*handle_get_changes_exception_by_version) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_parent_id,
    gint arg_db_version);

  gboolean (*handle_get_count) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    const gchar *arg_view_uri);

  gboolean (*handle_get_count_with_query) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    GVariant *arg_query);

  gboolean (*handle_get_current_version) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle);

  gboolean (*handle_get_last_change_version) (
    calDbus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_record) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_id);

  gboolean (*handle_get_records_with_query) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    GVariant *arg_query,
    gint arg_offset,
    gint arg_limit);

  gboolean (*handle_insert_record) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    GVariant *arg_record);

  gboolean (*handle_insert_records) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    GVariant *arg_list);

  gboolean (*handle_insert_vcalendars) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    const gchar *arg_stream);

  gboolean (*handle_register_resource) (
    calDbus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_changed_cb) (
    calDbus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_replace_record) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    GVariant *arg_record,
    gint arg_id);

  gboolean (*handle_replace_records) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    GVariant *arg_list,
    GVariant *arg_ids,
    gint arg_count);

  gboolean (*handle_replace_vcalendars) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    const gchar *arg_stream,
    GVariant *arg_ids,
    gint arg_count);

  gboolean (*handle_unregister_resource) (
    calDbus *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_update_record) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    GVariant *arg_record);

  gboolean (*handle_update_records) (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_handle,
    GVariant *arg_list);

};

GType cal_dbus_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *cal_dbus_interface_info (void);
guint cal_dbus_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void cal_dbus_complete_register_resource (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void cal_dbus_complete_unregister_resource (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void cal_dbus_complete_insert_record (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    gint id,
    gint version,
    gint ret);

void cal_dbus_complete_update_record (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    gint version,
    gint ret);

void cal_dbus_complete_delete_record (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    gint version,
    gint ret);

void cal_dbus_complete_replace_record (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    gint version,
    gint ret);

void cal_dbus_complete_insert_records (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *ids,
    gint count,
    gint version,
    gint ret);

void cal_dbus_complete_update_records (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    gint version,
    gint ret);

void cal_dbus_complete_delete_records (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    gint version,
    gint ret);

void cal_dbus_complete_replace_records (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    gint version,
    gint ret);

void cal_dbus_complete_get_record (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *record,
    gint ret);

void cal_dbus_complete_get_all_records (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *list,
    gint ret);

void cal_dbus_complete_get_records_with_query (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *list,
    gint ret);

void cal_dbus_complete_get_count (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret,
    gint count);

void cal_dbus_complete_get_count_with_query (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret,
    gint count);

void cal_dbus_complete_get_current_version (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    gint version,
    gint ret);

void cal_dbus_complete_add_changed_cb (
    calDbus *object,
    GDBusMethodInvocation *invocation);

void cal_dbus_complete_remove_changed_cb (
    calDbus *object,
    GDBusMethodInvocation *invocation);

void cal_dbus_complete_get_changes_by_version (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *list,
    gint version,
    gint ret);

void cal_dbus_complete_get_last_change_version (
    calDbus *object,
    GDBusMethodInvocation *invocation);

void cal_dbus_complete_get_changes_exception_by_version (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *list,
    gint ret);

void cal_dbus_complete_clean_after_sync (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void cal_dbus_complete_insert_vcalendars (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    GVariant *ids,
    gint count,
    gint version,
    gint ret);

void cal_dbus_complete_replace_vcalendars (
    calDbus *object,
    GDBusMethodInvocation *invocation,
    gint ret,
    gint version);



/* D-Bus method calls: */
void cal_dbus_call_register_resource (
    calDbus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_register_resource_finish (
    calDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_register_resource_sync (
    calDbus *proxy,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_unregister_resource (
    calDbus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_unregister_resource_finish (
    calDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_unregister_resource_sync (
    calDbus *proxy,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_insert_record (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_record,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_insert_record_finish (
    calDbus *proxy,
    gint *out_id,
    gint *out_version,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_insert_record_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_record,
    gint *out_id,
    gint *out_version,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_update_record (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_record,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_update_record_finish (
    calDbus *proxy,
    gint *out_version,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_update_record_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_record,
    gint *out_version,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_delete_record (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_delete_record_finish (
    calDbus *proxy,
    gint *out_version,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_delete_record_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_id,
    gint *out_version,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_replace_record (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_record,
    gint arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_replace_record_finish (
    calDbus *proxy,
    gint *out_version,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_replace_record_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_record,
    gint arg_id,
    gint *out_version,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_insert_records (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_insert_records_finish (
    calDbus *proxy,
    GVariant **out_ids,
    gint *out_count,
    gint *out_version,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_insert_records_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_list,
    GVariant **out_ids,
    gint *out_count,
    gint *out_version,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_update_records (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_update_records_finish (
    calDbus *proxy,
    gint *out_version,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_update_records_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_list,
    gint *out_version,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_delete_records (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    GVariant *arg_ids,
    gint arg_count,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_delete_records_finish (
    calDbus *proxy,
    gint *out_version,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_delete_records_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    GVariant *arg_ids,
    gint arg_count,
    gint *out_version,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_replace_records (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_list,
    GVariant *arg_ids,
    gint arg_count,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_replace_records_finish (
    calDbus *proxy,
    gint *out_version,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_replace_records_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_list,
    GVariant *arg_ids,
    gint arg_count,
    gint *out_version,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_get_record (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_get_record_finish (
    calDbus *proxy,
    GVariant **out_record,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_get_record_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_id,
    GVariant **out_record,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_get_all_records (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_offset,
    gint arg_limit,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_get_all_records_finish (
    calDbus *proxy,
    GVariant **out_list,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_get_all_records_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_offset,
    gint arg_limit,
    GVariant **out_list,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_get_records_with_query (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_query,
    gint arg_offset,
    gint arg_limit,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_get_records_with_query_finish (
    calDbus *proxy,
    GVariant **out_list,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_get_records_with_query_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_query,
    gint arg_offset,
    gint arg_limit,
    GVariant **out_list,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_get_count (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_get_count_finish (
    calDbus *proxy,
    gint *out_ret,
    gint *out_count,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_get_count_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint *out_ret,
    gint *out_count,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_get_count_with_query (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_query,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_get_count_with_query_finish (
    calDbus *proxy,
    gint *out_ret,
    gint *out_count,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_get_count_with_query_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    GVariant *arg_query,
    gint *out_ret,
    gint *out_count,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_get_current_version (
    calDbus *proxy,
    GVariant *arg_handle,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_get_current_version_finish (
    calDbus *proxy,
    gint *out_version,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_get_current_version_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    gint *out_version,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_add_changed_cb (
    calDbus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_add_changed_cb_finish (
    calDbus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_add_changed_cb_sync (
    calDbus *proxy,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_remove_changed_cb (
    calDbus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_remove_changed_cb_finish (
    calDbus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_remove_changed_cb_sync (
    calDbus *proxy,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_get_changes_by_version (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_book_id,
    gint arg_db_version,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_get_changes_by_version_finish (
    calDbus *proxy,
    GVariant **out_list,
    gint *out_version,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_get_changes_by_version_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_book_id,
    gint arg_db_version,
    GVariant **out_list,
    gint *out_version,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_get_last_change_version (
    calDbus *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_get_last_change_version_finish (
    calDbus *proxy,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_get_last_change_version_sync (
    calDbus *proxy,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_get_changes_exception_by_version (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_parent_id,
    gint arg_db_version,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_get_changes_exception_by_version_finish (
    calDbus *proxy,
    GVariant **out_list,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_get_changes_exception_by_version_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_view_uri,
    gint arg_parent_id,
    gint arg_db_version,
    GVariant **out_list,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_clean_after_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    gint arg_book_id,
    gint arg_db_version,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_clean_after_sync_finish (
    calDbus *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_clean_after_sync_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    gint arg_book_id,
    gint arg_db_version,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_insert_vcalendars (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_stream,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_insert_vcalendars_finish (
    calDbus *proxy,
    GVariant **out_ids,
    gint *out_count,
    gint *out_version,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_insert_vcalendars_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_stream,
    GVariant **out_ids,
    gint *out_count,
    gint *out_version,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void cal_dbus_call_replace_vcalendars (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_stream,
    GVariant *arg_ids,
    gint arg_count,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean cal_dbus_call_replace_vcalendars_finish (
    calDbus *proxy,
    gint *out_ret,
    gint *out_version,
    GAsyncResult *res,
    GError **error);

gboolean cal_dbus_call_replace_vcalendars_sync (
    calDbus *proxy,
    GVariant *arg_handle,
    const gchar *arg_stream,
    GVariant *arg_ids,
    gint arg_count,
    gint *out_ret,
    gint *out_version,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define CAL_TYPE_DBUS_PROXY (cal_dbus_proxy_get_type ())
#define CAL_DBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CAL_TYPE_DBUS_PROXY, calDbusProxy))
#define CAL_DBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CAL_TYPE_DBUS_PROXY, calDbusProxyClass))
#define CAL_DBUS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CAL_TYPE_DBUS_PROXY, calDbusProxyClass))
#define CAL_IS_DBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CAL_TYPE_DBUS_PROXY))
#define CAL_IS_DBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CAL_TYPE_DBUS_PROXY))

typedef struct _calDbusProxy calDbusProxy;
typedef struct _calDbusProxyClass calDbusProxyClass;
typedef struct _calDbusProxyPrivate calDbusProxyPrivate;

struct _calDbusProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  calDbusProxyPrivate *priv;
};

struct _calDbusProxyClass
{
  GDBusProxyClass parent_class;
};

GType cal_dbus_proxy_get_type (void) G_GNUC_CONST;

void cal_dbus_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
calDbus *cal_dbus_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
calDbus *cal_dbus_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void cal_dbus_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
calDbus *cal_dbus_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
calDbus *cal_dbus_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define CAL_TYPE_DBUS_SKELETON (cal_dbus_skeleton_get_type ())
#define CAL_DBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CAL_TYPE_DBUS_SKELETON, calDbusSkeleton))
#define CAL_DBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CAL_TYPE_DBUS_SKELETON, calDbusSkeletonClass))
#define CAL_DBUS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CAL_TYPE_DBUS_SKELETON, calDbusSkeletonClass))
#define CAL_IS_DBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CAL_TYPE_DBUS_SKELETON))
#define CAL_IS_DBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CAL_TYPE_DBUS_SKELETON))

typedef struct _calDbusSkeleton calDbusSkeleton;
typedef struct _calDbusSkeletonClass calDbusSkeletonClass;
typedef struct _calDbusSkeletonPrivate calDbusSkeletonPrivate;

struct _calDbusSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  calDbusSkeletonPrivate *priv;
};

struct _calDbusSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType cal_dbus_skeleton_get_type (void) G_GNUC_CONST;

calDbus *cal_dbus_skeleton_new (void);


G_END_DECLS

#endif /* __CAL_DBUS_H__ */
